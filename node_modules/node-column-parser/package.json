{
  "name": "node-column-parser",
  "version": "1.0.1",
  "description": "Intended to provide better shell output to Javascript object parsing, turning a whitespace-delimited table (such as ps aux) returns, into an array of Javascript objects, each object keyed on column headers, using row values.",
  "main": "node-column-parser.js",
  "scripts": {
    "test": "var rows=columnParser(shellOutput);"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/downwa/node-column-parser.git"
  },
  "keywords": [
    "nodejs",
    "parse",
    "columns",
    "space-delimited",
    "JSON"
  ],
  "author": {
    "name": "Warren E. Downs"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/downwa/node-column-parser/issues"
  },
  "homepage": "https://github.com/downwa/node-column-parser#readme",
  "readme": "# node-column-parser\nIntended to provide better shell output to Javascript object parsing, turning a whitespace-delimited table (such as ps aux) returns, into an array of Javascript objects, each object keyed on column headers, using row values.\n\n## Credits\nhttps://github.com/namshi/node-shell-parser/\nfor the idea and outline for this README (but not for the implementation).  I tried it first and found it buggy so decided to make a better one from scratch.\n\n## Install\n\nYou can install this library through [NPM](https://www.npmjs.org/package/node-column-parser):\n\n```bash\nnpm install node-column-parser\n```\n\n## Definition:\n\n```javascript\n  columnParser(shellOutput, options);\n```\n\n* `shellOutput`: the string resulting from running your command\n* `options`: Currently an optional empty object which will contain a headers object on return\n\n## Usage\n\nExecute a process, get its output and then simply\nfeed it to the parser:\n\n``` javascript\n\nvar columnParser=require(\"node-column-parser\");\n\nvar util=require('util');\n\nconst exec = require('child_process').exec;\nexec('ps u', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  var options={};\n  var rows=columnParser(stdout, options);\n  console.log(\"rows.length=\"+rows.length+\"\\n\"+util.inspect(rows));\n  console.log(\"HEADERS:\\n\"+util.inspect(options.headers));\n  console.log(`stderr: ${stderr}`);\n});\n```\n\nExecution results:\n\n```\nWarrenMac:node-column-parser warren.downs$ node pstest.js\n[ { USER: 'warren.downs',\n    PID: '84777',\n    '%CPU': '0.0',\n    '%MEM': '0.2',\n    VSZ: '057464',\n    RSS: '9848',\n    TT: 's000',\n    STAT: 'R+',\n    STARTED: '4:49PM',\n    TIME: '0:00.08',\n    COMMAND: 'node pstest.js' },\n  { USER: 'warren.downs',\n    PID: '84320',\n    '%CPU': '0.0',\n    '%MEM': '0.0',\n    VSZ: '463084',\n    RSS: '1592',\n    TT: 's001',\n    STAT: 'S+',\n    STARTED: '4:05PM',\n    TIME: '0:00.01',\n    COMMAND: '-bash' },\n  { USER: 'warren.downs',\n    PID: '14166',\n    '%CPU': '0.0',\n    '%MEM': '0.0',\n    VSZ: '463084',\n    RSS: '980',\n    TT: 's000',\n    STAT: 'S',\n    STARTED: '12Jul16',\n    TIME: '0:01.02',\n    COMMAND: '-bash' } ]\nHEADERS:\n[ { header: 'USER', start: 0, end: 3, ltr: true },\n  { header: 'PID', start: 13, end: 17, ltr: false },\n  { header: '%CPU', start: 20, end: 23, ltr: false },\n  { header: '%MEM', start: 25, end: 28, ltr: false },\n  { header: 'VSZ', start: 32, end: 37, ltr: false },\n  { header: 'RSS', start: 41, end: 44, ltr: false },\n  { header: 'TT', start: 46, end: 49, ltr: false },\n  { header: 'STAT', start: 52, end: 55, ltr: true },\n  { header: 'STARTED', start: 57, end: 63, ltr: false },\n  { header: 'TIME', start: 67, end: 73, ltr: false },\n  { header: 'COMMAND', start: 75, end: 80, ltr: true } ]\nstderr: \n\n\n```\n\n## Command-lines containing spaces\n\nChanging e.g. \"ps u\" to \"ps aux\" turns e.g.\n```\nUSER              PID  %CPU %MEM      VSZ    RSS   TT  STAT STARTED      TIME COMMAND\nwarren.downs      432   0.4  2.2  2895776 181368   ??  S    11Jul16  43:30.62 /Applications/Google Drive.app/Contents/MacOS/Google Drive\n```\ninto\n```\n  { USER: 'warren.downs',\n    PID: '432',\n    '%CPU': '0.4',\n    '%MEM': '2.2',\n    VSZ: '2895776',\n    RSS: '181368',\n    TT: '??',\n    STAT: 'S',\n    STARTED: '11Jul16',\n    TIME: '43:30.62',\n    COMMAND: '/Applications/Google Drive.app/Contents/MacOS/Google Drive' },\n```\n\nAs long as the headers line up in a tabular manner, or the space-containing command line is the last column in the table,\nparsing should work fine.\n\n## How it works\nParsing basically replicates how a human would visually scan a whitespace-delimited table.  The column headers give\na starting point for the table columns, and scanning the entire table tells us whether a column is right or left\naligned.\n\nIf the rightmost character in a row below a column header area is always non-blank, as well as the leftmost character,\nand the one to it's left, then the column is definitely right-aligned (see e.g. VSZ, RSS, and TIME, above).\n\nIf there's not enough data to tell, then it doesn't matter (see PID, TT).  In the above example, %CPU and %MEM are\ntechnically right-aligned but this algorithm doesn't care unless the values expand to the left beyond the header's\nstarting column.\n\nIf a column is right-aligned expanding to the left, the actual starting point of the left-most data of a column\nin any row, is used for all the data rows.\n",
  "readmeFilename": "README.md",
  "gitHead": "7a06b6bb6cf5a05f9f6672e97d598d496afc2dbf",
  "_id": "node-column-parser@1.0.1",
  "_shasum": "622ed02aef0fd567d36772a5247b20900522656d",
  "_from": "node-column-parser@latest"
}
